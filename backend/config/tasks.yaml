design_task:
  description: >
    Take the high level requirements described here and prepare a detailed design for the engineer;
    everything should be in 1 python module, but outline the classes and methods in the module.
    Also include steps for the engineer to follow in order to implement the module.
    Here are the requirements: {requirements}
    IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.
  expected_output: >
    A detailed design for the engineer, identifying the classes and functions in the module.
  agent: engineering_lead
  output_file: output/design.md

code_task:
  description: >
    Write a python module that implements the design described by the engineering lead, in order to achieve the requirements.
    Here are the requirements: {requirements}
  expected_output: >
    A python module that implements the design and achieves the requirements.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: backend_engineer
  context:
    - design_task
  output_file: output/{module_name}

frontend_task:
  description: >
    Write a UI in a framework (Like React + Vite) that demonstrates the given backend class in {module_name}.
    Assume there is only 1 user, and keep the UI very simple indeed - just a prototype or demo.
    Here are the requirements: {requirements}
  expected_output: >
    A UI in that demonstrates the given backend class.
    The file should be ready so that it can be run as-is, in the same directory as the backend module, and it should import the backend class from {module_name}.
    IMPORTANT: Output ONLY the raw code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid code that can be directly saved to a file and executed. Also, ensure that the frontend code is compatible with the backend module.
  agent: frontend_engineer
  context:
    - code_task
  output_file: output/App.jsx

test_task:
  description: >
    Write unit tests for the given backend module {module_name} and create a test_{module_name} in the same directory as the backend module.
  expected_output: >
    A test_{module_name} module that tests the given backend module.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: test_engineer
  context:
    - code_task
  output_file: output/test_{module_name}

# NEW TASKS - These are created dynamically when agents are enabled
documentation_task:
  description: >
    Write comprehensive documentation for the project including a README.md with setup instructions, API documentation, and usage examples.
    Include the requirements: {requirements}
  expected_output: >
    A comprehensive README.md file with setup instructions, API documentation, and usage examples.
  agent: documentation_engineer
  context:
    - code_task
    - frontend_task
  output_file: output/README.md

security_audit_task:
  description: >
    Analyze the backend code for security vulnerabilities including input validation, authentication, authorization, and data handling. Provide specific recommendations.
  expected_output: >
    A detailed security audit report with identified vulnerabilities and specific recommendations for improvement.
  agent: security_engineer
  context:
    - code_task
  output_file: output/security_report.md

performance_task:
  description: >
    Review the backend code for performance issues including algorithmic complexity, database queries, memory usage, and suggest specific optimizations.
  expected_output: >
    A performance analysis report with identified bottlenecks and specific optimization recommendations.
  agent: performance_engineer
  context:
    - code_task
  output_file: output/performance_report.md

deployment_task:
  description: >
    Create deployment scripts, Docker configuration, and CI/CD pipeline setup for the application. Include environment setup and production deployment steps.
  expected_output: >
    Deployment scripts and configuration files ready for production deployment.
    IMPORTANT: Output ONLY the raw code without any markdown formatting, code block delimiters, or backticks.
  agent: devops_engineer
  context:
    - code_task
    - frontend_task
    - test_task
  output_file: output/deploy.sh